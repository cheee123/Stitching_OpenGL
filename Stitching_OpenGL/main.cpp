#include <stdio.h>
#include <stdlib.h>
#include <iostream>

#include <GLES3/gl32.h>
#include <GLFW/glfw3.h>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>
#include <glm/gtx/rotate_vector.hpp>
#include <glm/gtx/vector_angle.hpp>
#include "opencv2/imgcodecs.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/highgui.hpp"

#include "Texture.h"
#include "shaderClass.h"
#include "VAO.h"
#include "VBO.h"
#include "EBO.h"
#include "Camera.h"

const unsigned int width = 1600;
const unsigned int height = 400;

int main()
{	
	GLfloat vertices[] = {
	//  ---- Position ----  -TexCoord -
		2.0f,  0.5f,  0.0f, 1.0f, 1.0f,  // UR
		2.0f,  -0.5f, 0.0f, 1.0f, 0.0f,  // BR
		-2.0f, -0.5f, 0.0f, 0.0f, 0.0f,  // BL
		-2.0f, 0.5f,  0.0f, 0.0f, 1.0f   // UL
	};
	GLuint  indices[] = {
		3,0,2,
		2,0,1
	};

	// Initialize glfw
	glfwInit();
	glfwWindowHint(GLFW_CLIENT_API, GLFW_OPENGL_ES_API);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 1);
	GLFWwindow* window = glfwCreateWindow(width, height, "OpenGL Stitching", NULL, NULL);
	if (window == NULL)
	{
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	printf("GL_VERSION  : %s\n", glGetString(GL_VERSION) );
	printf("GL_RENDERER : %s\n", glGetString(GL_RENDERER) );
	glViewport(0, 0, width, height);
	glEnable(GL_DEPTH_TEST);

	// Initialize OpenGL features
	Shader shaderProgram("./resources/stitching.vert", "./resources/stitching.frag");
	VAO VAO0;
	VAO0.Bind();
	VBO VBO0(vertices, sizeof(vertices));
	EBO EBO0(indices, sizeof(indices));
	VAO0.Bind();
	VAO0.LinkAttrib(VBO0, 0, 3, GL_FLOAT, 5 * sizeof(float), (void*)0);
	VAO0.LinkAttrib(VBO0, 1, 2, GL_FLOAT, 5 * sizeof(float), (void*)(3 * sizeof(float)));
	VAO0.Unbind();
	VBO0.Unbind();
	EBO0.Unbind();
	Camera camera(width, height, glm::vec3(0.0f, 0.0f, 0.5f));

	// Initialize Textures
	Texture brickTex0("./resources/field0.jpg", "GL_TEXTURE_2D", 0);
	brickTex0.texUnit(shaderProgram, "tex0");
	Texture brickTex1("./resources/field1.jpg", "GL_TEXTURE_2D", 1);
	brickTex1.texUnit(shaderProgram, "tex1");
	Texture brickTex2("./resources/field2.jpg", "GL_TEXTURE_2D", 2);
	brickTex2.texUnit(shaderProgram, "tex2");
	Texture brickTex3("./resources/field3.jpg", "GL_TEXTURE_2D", 3);
	brickTex3.texUnit(shaderProgram, "tex3");
	Texture brickTex4("./resources/field4.jpg", "GL_TEXTURE_2D", 4);
	brickTex4.texUnit(shaderProgram, "tex4");
	Texture brickTex5("./resources/field5.jpg", "GL_TEXTURE_2D", 5);
	brickTex5.texUnit(shaderProgram, "tex5");
	Texture WM_Tex("./resources/WM.jpg", "GL_TEXTURE_2D", 6);
	WM_Tex.texUnit(shaderProgram, "WM");



	// Code generated by Python:

	/////////////////////////////////
	//////// | Paste here | /////////
	//////// v            v /////////
	float buf_data [45];
	buf_data[0] = 1.0440431349854553; buf_data[1] = 0.09396861788171709; buf_data[2] = 0.0033231587979345384; 
	buf_data[3] = -0.09811125837669636; buf_data[4] = 1.0831161257515687; buf_data[5] = 0.07816047357260474; 
	buf_data[6] = -0.46363365653343047; buf_data[7] = -0.12253833767828178; buf_data[8] = 0.992716912756655; 
	buf_data[9] = 1.0280288817349985; buf_data[10] = 0.1129719503455058; buf_data[11] = -0.02104281414318166; 
	buf_data[12] = -0.19104281568805942; buf_data[13] = 1.0866352069199552; buf_data[14] = 0.10077512263704645; 
	buf_data[15] = -0.8594272751503724; buf_data[16] = -0.160651361474773; buf_data[17] = 1.0120056424304118; 
	buf_data[18] = 0.9764166451652467; buf_data[19] = 0.13279874495920152; buf_data[20] = -0.042563985482310725; 
	buf_data[21] = -0.3072769369017973; buf_data[22] = 1.0017888002416937; buf_data[23] = 0.039731456216849016; 
	buf_data[24] = -1.0937262367977834; buf_data[25] = -0.1576075011339191; buf_data[26] = 1.036687797057253; 
	buf_data[27] = 1.012838312254018; buf_data[28] = 0.19619897644994172; buf_data[29] = -0.026138412038396727; 
	buf_data[30] = -0.4103697238071731; buf_data[31] = 1.023366514854249; buf_data[32] = 0.07122790973175655; 
	buf_data[33] = -1.5582420577378204; buf_data[34] = -0.28453229111370376; buf_data[35] = 1.012016294731355; 
	buf_data[36] = 1.0332526621777642; buf_data[37] = 0.24290995836989068; buf_data[38] = 0.006442665586610419; 
	buf_data[39] = -0.482415566026554; buf_data[40] = 1.0178750122585298; buf_data[41] = 0.06071558655650932; 
	buf_data[42] = -1.8616261909288512; buf_data[43] = -0.3837592542349706; buf_data[44] = 0.9535383831765064; 
	glUniform1f(glGetUniformLocation(shaderProgram.ID, "f"), 0.7083333333333334);
	glUniform1f(glGetUniformLocation(shaderProgram.ID, "border_ratio"), 0.065);
	glUniform1f(glGetUniformLocation(shaderProgram.ID, "undrift"), 1.5417918639053256);
	float tl_y = 0.17;
	float tl_x = 0.0;
	float br_y = 0.9;
	float br_x = 0.44699872286079184;

	/////////////////////////////////
	/////////////////////////////////
	/////////////////////////////////

	GLuint buf;
	glGenBuffers(1, &buf);
	glBindBuffer(GL_TEXTURE_BUFFER, buf);
	glBufferData(GL_TEXTURE_BUFFER, sizeof(buf_data), buf_data, GL_STATIC_DRAW);
	//glBindBuffer(GL_TEXTURE_BUFFER, 0);

	GLuint tex;
	glGenTextures(1, &tex);
	glBindTexture(GL_TEXTURE_BUFFER, 0);

	// Debug
	// int mainerror = glGetError();
	// printf("mainrerror0: %d\n", mainerror);

	// Save stitching result 
	cv::Mat stitched_img(height, width, CV_8UC4);

	// Keeps track of the amount of frames in timeDiff
	double prevTime = 0.0;
	double crntTime = 0.0;
	double timeDiff;
	double readimagestime;
	unsigned int counter = 0;

	// Main while loop
	while (!glfwWindowShouldClose(window))
	{
		// Calculate FPS
		crntTime = glfwGetTime();
		timeDiff = crntTime - prevTime;
		counter++;
		if (timeDiff >= 2.0)
		{
			// Creates new title
			std::string FPS = std::to_string((1.0 / timeDiff) * counter);
			std::string ms = std::to_string((timeDiff / counter) * 1000);
			std::string newTitle = "OpenGL Stitching " + FPS + "FPS / " + ms + "ms";
			glfwSetWindowTitle(window, newTitle.c_str());

			// Resets times and counter
			prevTime = crntTime;
			counter = 0;
		}
		/*
		// Read new images (for example)
		cv::Mat img0 = cv::imread("./resources/field0.jpg");
		cv::Mat img1 = cv::imread("./resources/field1.jpg");
		cv::Mat img2 = cv::imread("./resources/field2.jpg");
		cv::Mat img3 = cv::imread("./resources/field3.jpg");
		cv::Mat img4 = cv::imread("./resources/field4.jpg");
		cv::Mat img5 = cv::imread("./resources/field5.jpg");
		cv::Mat imgs[] = {img0,img1,img2,img3,img4,img5};
		for(int i=0;i<6;i++){
			cv::cvtColor(imgs[i], imgs[i], cv::COLOR_BGR2RGB);
		}

		// Update textures
		brickTex0.NewImage(imgs[0].data);
		brickTex1.NewImage(imgs[1].data);
		brickTex2.NewImage(imgs[2].data);
		brickTex3.NewImage(imgs[3].data);
		brickTex4.NewImage(imgs[4].data);
		brickTex5.NewImage(imgs[5].data);
		*/

		// Re-render
		glClearColor(0.07f, 0.13f, 0.17f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		shaderProgram.Activate();
		camera.Inputs(window);
		camera.Matrix(90.0f, 0.1f, 100.0f, shaderProgram, "camMatrix");
		brickTex0.Bind();
		brickTex1.Bind();
		brickTex2.Bind();
		brickTex3.Bind();
		brickTex4.Bind();
		brickTex5.Bind();
		WM_Tex.Bind();
		
		glActiveTexture(GL_TEXTURE0 + 8);
		glBindTexture(GL_TEXTURE_BUFFER, tex);
		glTexBuffer(GL_TEXTURE_BUFFER, GL_R32F, buf);
		GLuint texUni = glGetUniformLocation(shaderProgram.ID, "buf");
		glUniform1i(texUni, 8);
		VAO0.Bind();
		
		glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(int), GL_UNSIGNED_INT, 0);
		
		// Read result, 
		glReadPixels(0, 0, width , height, GL_RGBA, GL_UNSIGNED_BYTE, stitched_img.data);
		
		glfwSwapBuffers(window);
		// Take care of all GLFW events
		glfwPollEvents();
	}

	// Crop and write stitched image
	cv::flip(stitched_img, stitched_img, 0);
	stitched_img = stitched_img(cv::Range(tl_y*height, br_y*height), cv::Range(tl_x*width, br_x*width));
	cv::cvtColor(stitched_img, stitched_img, cv::COLOR_BGR2RGB);
	cv::imwrite("./stitched_img.jpg", stitched_img); // location: out/build/stitched_img.jpg

	VAO0.Delete();
	VBO0.Delete();
	EBO0.Delete();
	brickTex0.Delete();
	brickTex1.Delete();
	brickTex2.Delete();
	brickTex3.Delete();
	brickTex4.Delete();
	brickTex5.Delete();
	WM_Tex.Delete();
	shaderProgram.Delete();

	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}
